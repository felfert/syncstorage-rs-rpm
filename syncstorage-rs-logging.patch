commit 6914ab50f3fbe595929fe8f02cca5373591d7fd8
Author: Fritz Elfert <fritz@fritz-elfert.de>
Date:   Fri Oct 17 22:46:54 2025 +0200

    Support journal logging if running under systemd

diff --git a/syncserver/Cargo.toml b/syncserver/Cargo.toml
index f84cd34..fe2fb90 100644
--- a/syncserver/Cargo.toml
+++ b/syncserver/Cargo.toml
@@ -56,6 +56,11 @@ urlencoding = "2.1"
 validator = "0.20"
 validator_derive = "0.20"
 woothee = "0.13"
+slog-journald = "2.2.0"
+rustix = { version = "1.0.3", default-features = false, features = [
+    "std",
+    "fs",
+] }
 
 [features]
 default = ["mysql", "py_verifier"]
diff --git a/syncserver/src/logging.rs b/syncserver/src/logging.rs
index b182fa6..34488af 100644
--- a/syncserver/src/logging.rs
+++ b/syncserver/src/logging.rs
@@ -4,6 +4,17 @@ use crate::error::ApiResult;
 
 use slog::{self, slog_o, Drain};
 use slog_mozlog_json::MozLogJson;
+use std::os::fd::AsFd;
+
+fn connected_to_journal() -> bool {
+    rustix::fs::fstat(std::io::stderr().as_fd())
+        .map(|stat| format!("{}:{}", stat.st_dev, stat.st_ino))
+        .ok()
+        .and_then(|stderr| {
+            std::env::var_os("JOURNAL_STREAM").map(|s| s.to_string_lossy() == stderr.as_str())
+        })
+        .unwrap_or(false)
+}
 
 pub fn init_logging(json: bool) -> ApiResult<()> {
     let logger = if json {
@@ -26,10 +37,16 @@ pub fn init_logging(json: bool) -> ApiResult<()> {
         let drain = slog_async::Async::new(drain).build().fuse();
         slog::Logger::root(drain, slog_o!())
     } else {
-        let decorator = slog_term::TermDecorator::new().build();
-        let drain = slog_term::FullFormat::new(decorator).build().fuse();
-        let drain = slog_envlogger::new(drain);
-        let drain = slog_async::Async::new(drain).build().fuse();
+        let drain = if connected_to_journal() {
+            let drain = slog_journald::JournaldDrain.fuse();
+            let drain = slog_envlogger::new(drain);
+            slog_async::Async::new(drain).build().fuse()
+        } else {
+            let decorator = slog_term::TermDecorator::new().build();
+            let drain = slog_term::FullFormat::new(decorator).build().fuse();
+            let drain = slog_envlogger::new(drain);
+            slog_async::Async::new(drain).build().fuse()
+        };
         slog::Logger::root(drain, slog_o!())
     };
     // XXX: cancel slog_scope's NoGlobalLoggerSet for now, it's difficult to
